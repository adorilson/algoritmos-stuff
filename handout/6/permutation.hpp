/** 
 * \file permutation.hpp
 *  
 * \brief Definition of class Permutation, which contains a method for
 * generating  the   "next"  permutation   of  an  array   of  integer
 * numbers. The next  permutation is the one that  follows the current
 * permutation of the array in  a sequence of permutations. So, if the
 * array has N elements, then all  N! permutations of the array can be
 * generated by calling the method  (N! - 1) times. The i-th execution
 * of the method  must take in the permutation  returned by the method
 * for the (i-1)-th execution. It  does not matter which array is used
 * in the  first call of the method,  as the method works  in a cyclic
 * way.
 *
 * \author
 * Marcelo Ferreira Siqueira \n
 * Universidade Federal do Rio Grande do Norte, \n
 * Departamento de Informatica e Matematica Aplicada, \n
 * mfsiqueira at dimap (dot) ufrn (dot) br
 *
 * \version 1.0
 * \date April 2013
 *
 * \attention This program is distributed WITHOUT ANY WARRANTY, and it
 *            may be freely redistributed under the condition that the
 *            copyright notices  are not removed,  and no compensation
 *            is received. Private, research, and institutional use is
 *            free. Distribution of this  code as part of a commercial
 *            system  is permissible ONLY  BY DIRECT  ARRANGEMENT WITH
 *            THE AUTHOR.
 */

#ifndef PERMUTATION_HPP
#define PERMUTATION_HPP


/**
 * \class Permutation
 *
 * \brief This class contains a method for generating a permutation of
 * a given array. 
 */
class Permutation {
public:
  // -----------------------------------------------------------------
  //
  // Public methods
  //
  // -----------------------------------------------------------------

  /**
   * \fn Permutation( )
   *
   * \brief Constructor.
   *
   */
  Permutation()
  {
  }


  /**
   * \fn void permute( int* a , int size )
   *
   * \brief  Generates the "next"  permutation of  a given  array. The
   * next permutation is the  one that follows the current permutation
   * of the array in a sequence of permutations. The first permutation
   * of  the array  is  the one  defined  by a  sorted  array. So,  to
   * generate the  N!, the method  must be called  N!  - 1  times such
   * that  the i-th  call takes  in  the permutation  returned by  the
   * method for  the (i-1)-th execution.  In addition, the  very first
   * call must take in the sorted array.
   *
   * \param a A pointer to an array of integers.
   * \param size The number of elements in the array.
   *
   */
  void permute( int* a , int size ) ;

} ;

#endif    // PERMUATION_HPP
